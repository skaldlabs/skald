"""
Django settings for the skald project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
import os
from datetime import timedelta
from pathlib import Path

import dj_database_url
import sentry_sdk
from dotenv import load_dotenv

load_dotenv(override=True)
logger = logging.getLogger(__name__)


def str_to_bool(input):
    if type(input) == bool:
        return input

    true_terms = ["true", "1", "yes", "y", "t"]
    false_terms = ["false", "0", "no", "n", "f"]

    # Normalize the input string to lowercase to make the function case-insensitive
    normalized_str = input.strip().lower()

    if normalized_str in true_terms:
        return True
    elif normalized_str in false_terms:
        return False
    else:
        raise ValueError("Input string does not represent a boolean value")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str_to_bool(os.getenv("DEBUG", False))

# self-hosted deploys are slightly different from our cloud deploys.
# they don't have billing, are single-tenant, etc.
IS_SELF_HOSTED_DEPLOY = str_to_bool(os.getenv("IS_SELF_HOSTED_DEPLOY", False))


SENTRY_DSN = os.getenv("SENTRY_DSN")
if not (DEBUG or IS_SELF_HOSTED_DEPLOY) and SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Add data like request headers and IP for users,
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
    )


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-^dd*jyje2dc7!f-^1=gk(mo5eux*1_113ff*ds5io14(u^sp#w"
)

# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "corsheaders",
    "skald.apps.SkaldConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework.authtoken",
    "django_crontab",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "skald.middleware.ConditionalCsrfMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "skald.middleware.token_cookie_auth.TokenCookieAuthenticationMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",)
    + (("rest_framework.renderers.BrowsableAPIRenderer",) if DEBUG else ()),
}

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

# Get allowed origins from environment or use defaults
CORS_ORIGINS_ENV = os.getenv("CORS_ALLOWED_ORIGINS", "")
if CORS_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ORIGINS_ENV.split(",")]
elif DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8000",
        "http://localhost:3000",
        "http://localhost:5173",
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        "https://app.useskald.com",
        "https://api.useskald.com",
        "https://platform.useskald.com",
    ]

FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")
API_URL = os.getenv("API_URL", "")
if IS_SELF_HOSTED_DEPLOY:
    if FRONTEND_URL:
        CORS_ALLOWED_ORIGINS.append(FRONTEND_URL)
    if API_URL:
        CORS_ALLOWED_ORIGINS.append(API_URL)

ROOT_URLCONF = "skald.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(os.path.normpath(os.path.dirname(__file__)), "templates")
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    if IS_SELF_HOSTED_DEPLOY:
        ALLOWED_HOSTS = [
            API_URL.rstrip("/").replace("https://", ""),
        ]
    else:
        ALLOWED_HOSTS = [
            "app.useskald.com",
            "api.useskald.com",
            "platform.useskald.com",
        ]


WSGI_APPLICATION = "skald.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.environ.get(
            "DATABASE_URL", "postgres://postgres:12345678@localhost/skald2"
        ),
        conn_max_age=0,
    )
}

# Use skald2_test for testing
DATABASES["default"]["TEST"] = {
    "NAME": "skald2_test",
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "skald.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_TOKEN_VALIDITY = timedelta(days=30)

RESEND_API_KEY = os.getenv("RESEND_API_KEY", None)

# Stripe Configuration
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", None)
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY", None)
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", None)

if not STRIPE_SECRET_KEY and not (DEBUG or IS_SELF_HOSTED_DEPLOY):
    import logging

    logging.getLogger(__name__).warning("STRIPE_SECRET_KEY not set in production")

EMAIL_DOMAIN = os.getenv("EMAIL_DOMAIN", "useskald.com")

EMAIL_VERIFICATION_ENABLED = str_to_bool(
    os.getenv("EMAIL_VERIFICATION_ENABLED", not IS_SELF_HOSTED_DEPLOY)
)

# Authentication bypass for development/testing
DISABLE_AUTH = str_to_bool(os.getenv("DISABLE_AUTH", False))


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


USE_TZ = True
TIME_ZONE = "UTC"

CSRF_TRUSTED_ORIGINS = [
    "https://app.useskald.com",
    "https://platform.useskald.com",
    "http://localhost:8000",
    "http://localhost:3000",
    "http://localhost:5173",
]

# Add self-hosted deployment URLs to CSRF trusted origins
if IS_SELF_HOSTED_DEPLOY:
    if FRONTEND_URL:
        CSRF_TRUSTED_ORIGINS.append(FRONTEND_URL)
    if API_URL:
        CSRF_TRUSTED_ORIGINS.append(API_URL)

USE_SECURE_SETTINGS = not DEBUG

if USE_SECURE_SETTINGS:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SSL redirect - disable when using a reverse proxy like Traefik that handles SSL
SECURE_SSL_REDIRECT = str_to_bool(os.getenv("SECURE_SSL_REDIRECT", USE_SECURE_SETTINGS))
SECURE_REDIRECT_EXEMPT = [
    "api/health",
    "api/health/",
]
SESSION_COOKIE_SECURE = USE_SECURE_SETTINGS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"

CSRF_COOKIE_SECURE = USE_SECURE_SETTINGS
CSRF_COOKIE_SAMESITE = "Lax"


# Logging

# django log level propagates down to things like db and file operations
DJANGO_LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "WARNING")

# app log level defines skald-specific logs from our code
APP_LOG_LEVEL = os.getenv("APP_LOG_LEVEL", "DEBUG")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": DJANGO_LOG_LEVEL,
            "propagate": False,
        },
        "skald": {
            "handlers": ["console"],
            "level": APP_LOG_LEVEL,
            "propagate": False,
        },
    },
}


# Host from where the UI is served rather than the API
DEFAULT_APP_HOST = "http://localhost:3000" if DEBUG else "https://api.useskald.com"

APP_HOST = os.getenv("APP_HOST", DEFAULT_APP_HOST)

# Embedding Provider Configuration
EMBEDDING_PROVIDER = os.getenv("EMBEDDING_PROVIDER", "voyage")
EMBEDDING_SERVICE_URL = os.getenv("EMBEDDING_SERVICE_URL", "http://localhost:8001")
EMBEDDING_VECTOR_DIMENSIONS = 2048

# Voyage AI
VOYAGE_API_KEY = os.getenv("VOYAGE_API_KEY")
VOYAGE_EMBEDDING_MODEL = os.getenv("VOYAGE_EMBEDDING_MODEL", "voyage-3-large")

# OpenAI
OPENAI_EMBEDDING_MODEL = os.getenv("OPENAI_EMBEDDING_MODEL", "text-embedding-3-large")


# LLM Configuration
LLM_PROVIDER = os.getenv("LLM_PROVIDER", "openai")

# OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# Anthropic
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
ANTHROPIC_MODEL = os.getenv("ANTHROPIC_MODEL", "claude-3-7-sonnet-20250219")

# Local LLM (OpenAI-compatible API)
LOCAL_LLM_BASE_URL = os.getenv("LOCAL_LLM_BASE_URL")
LOCAL_LLM_MODEL = os.getenv("LOCAL_LLM_MODEL", "llama-3.1-8b-instruct")
LOCAL_LLM_API_KEY = os.getenv("LOCAL_LLM_API_KEY", None)

# Rerank Configuration
VOYAGE_RERANK_MODEL = os.getenv("VOYAGE_RERANK_MODEL", "rerank-2.5")
POST_RERANK_TOP_K = os.getenv("POST_RERANK_TOP_K", 50)
VECTOR_SEARCH_TOP_K = os.getenv("VECTOR_SEARCH_TOP_K", 100)

# Validation
SUPPORTED_LLM_PROVIDERS = ["openai", "anthropic", "local"]
if LLM_PROVIDER not in SUPPORTED_LLM_PROVIDERS:
    raise ValueError(
        f"Invalid LLM_PROVIDER: {LLM_PROVIDER}. "
        f"Supported: {', '.join(SUPPORTED_LLM_PROVIDERS)}"
    )

# Embedding Provider Validation
SUPPORTED_EMBEDDING_PROVIDERS = ["voyage", "openai", "local"]
if EMBEDDING_PROVIDER not in SUPPORTED_EMBEDDING_PROVIDERS:
    raise ValueError(
        f"Invalid EMBEDDING_PROVIDER: {EMBEDDING_PROVIDER}. "
        f"Supported: {', '.join(SUPPORTED_EMBEDDING_PROVIDERS)}"
    )

# Warn if LLM provider API keys are missing
if LLM_PROVIDER == "openai" and not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY not set in production")
elif LLM_PROVIDER == "anthropic" and not ANTHROPIC_API_KEY:
    logger.warning("ANTHROPIC_API_KEY not set in production")
elif LLM_PROVIDER == "local" and not LOCAL_LLM_BASE_URL:
    logger.warning("LOCAL_LLM_BASE_URL not set for local provider")

# Warn if embedding provider API keys are missing
if EMBEDDING_PROVIDER == "voyage" and not VOYAGE_API_KEY:
    logger.warning("VOYAGE_API_KEY not set in production")
elif EMBEDDING_PROVIDER == "openai" and not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY not set for embedding provider in production")
elif EMBEDDING_PROVIDER == "local" and not EMBEDDING_SERVICE_URL:
    logger.warning("EMBEDDING_SERVICE_URL not set for local provider")

# Posthog
POSTHOG_PUBLIC_API_KEY = os.getenv(
    "POSTHOG_PUBLIC_API_KEY", "phc_B77mcYC1EycR6bKLgSNzjM9aaeiWXhoeizyriFIxWf2"
)
POSTHOG_HOST = os.getenv("POSTHOG_HOST", "https://us.i.posthog.com")

# mechanism for communicating with the memo processing server
INTER_PROCESS_QUEUE = os.getenv("INTER_PROCESS_QUEUE", "redis")

if INTER_PROCESS_QUEUE not in ["redis", "sqs", "rabbitmq"]:
    raise ValueError(f"Invalid inter-process queue: {INTER_PROCESS_QUEUE}")


SQS_QUEUE_URL = os.getenv("SQS_QUEUE_URL")
AWS_REGION = os.getenv("AWS_REGION", "us-east-2")

# redis
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")

# channel for communicating with the memo processing server
REDIS_MEMO_PROCESSING_PUB_SUB_CHANNEL = os.getenv(
    "REDIS_PUB_SUB_CHANNEL_NAME", "process_memo"
)

# rabbitmq
RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
RABBITMQ_PORT = os.getenv("RABBITMQ_PORT", "5672")
RABBITMQ_USER = os.getenv("RABBITMQ_USER", "guest")
RABBITMQ_PASSWORD = os.getenv("RABBITMQ_PASSWORD", "guest")
RABBITMQ_VHOST = os.getenv("RABBITMQ_VHOST", "/")
