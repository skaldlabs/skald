#!/usr/bin/env python
"""
Test script to view the SQL queries generated by filter_utils.py

Run with: python test_filter_sql.py
"""
import os

import django

# Setup Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "skald.settings")
django.setup()

from skald.models.memo import Memo
from skald.utils.filter_utils import filter_queryset


def print_query(queryset, description):
    """Print the SQL query for a queryset"""
    print(f"\n{'='*80}")
    print(f"{description}")
    print(f"{'='*80}")
    try:
        sql = str(queryset.query)
        # Pretty print the SQL
        sql = sql.replace(" WHERE ", "\nWHERE ")
        sql = sql.replace(" AND ", "\n  AND ")
        sql = sql.replace(" OR ", "\n  OR ")
        sql = sql.replace(" FROM ", "\nFROM ")
        print(sql)
    except Exception as e:
        print(f"Error: {e}")


def test_native_field_filters():
    """Test all native field filter operators"""
    print("\n" + "=" * 80)
    print("NATIVE FIELD FILTERS")
    print("=" * 80)

    base_queryset = Memo.objects.all()

    # Test eq
    filters = [
        {
            "field": "title",
            "operator": "eq",
            "value": "Test Memo",
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: eq (exact match)")

    # Test neq
    filters = [
        {
            "field": "title",
            "operator": "neq",
            "value": "Test Memo",
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: neq (not equal)")

    # Test contains
    filters = [
        {
            "field": "title",
            "operator": "contains",
            "value": "test",
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: contains (case-insensitive substring)")

    # Test startswith
    filters = [
        {
            "field": "title",
            "operator": "startswith",
            "value": "Test",
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: startswith")

    # Test endswith
    filters = [
        {
            "field": "title",
            "operator": "endswith",
            "value": "Memo",
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: endswith")

    # Test in
    filters = [
        {
            "field": "source",
            "operator": "in",
            "value": ["web", "api", "cli"],
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: in (list membership)")

    # Test not_in
    filters = [
        {
            "field": "source",
            "operator": "not_in",
            "value": ["web", "api"],
            "filter_type": "native_field",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Native Field: not_in")


def test_custom_metadata_filters():
    """Test all custom metadata filter operators"""
    print("\n" + "=" * 80)
    print("CUSTOM METADATA FILTERS")
    print("=" * 80)

    base_queryset = Memo.objects.all()

    # Test eq
    filters = [
        {
            "field": "category",
            "operator": "eq",
            "value": "documentation",
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: eq (metadata ->> 'category' = 'documentation')")

    # Test neq
    filters = [
        {
            "field": "category",
            "operator": "neq",
            "value": "documentation",
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: neq (metadata ->> 'category' != 'documentation')")

    # Test contains
    filters = [
        {
            "field": "category",
            "operator": "contains",
            "value": "doc",
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: contains (metadata ->> 'category' ILIKE '%doc%')")

    # Test startswith
    filters = [
        {
            "field": "category",
            "operator": "startswith",
            "value": "doc",
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: startswith (metadata ->> 'category' LIKE 'doc%')")

    # Test endswith
    filters = [
        {
            "field": "category",
            "operator": "endswith",
            "value": "ation",
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: endswith (metadata ->> 'category' LIKE '%ation')")

    # Test in
    filters = [
        {
            "field": "status",
            "operator": "in",
            "value": ["active", "pending", "draft"],
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(
        qs,
        "Custom Metadata: in (metadata ->> 'status' = ANY(ARRAY['active', 'pending', 'draft']))",
    )

    # Test not_in
    filters = [
        {
            "field": "status",
            "operator": "not_in",
            "value": ["archived", "deleted"],
            "filter_type": "custom_metadata",
        }
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Custom Metadata: not_in")


def test_combined_filters():
    """Test multiple filters combined"""
    print("\n" + "=" * 80)
    print("COMBINED FILTERS")
    print("=" * 80)

    base_queryset = Memo.objects.all()

    filters = [
        {
            "field": "title",
            "operator": "contains",
            "value": "test",
            "filter_type": "native_field",
        },
        {
            "field": "category",
            "operator": "eq",
            "value": "documentation",
            "filter_type": "custom_metadata",
        },
        {
            "field": "source",
            "operator": "in",
            "value": ["web", "api"],
            "filter_type": "native_field",
        },
    ]
    qs = filter_queryset(base_queryset, filters)
    print_query(qs, "Combined: Multiple filters with AND logic")


if __name__ == "__main__":
    print("\n" + "=" * 80)
    print("DJANGO FILTER SQL QUERY VIEWER")
    print("=" * 80)

    test_native_field_filters()
    test_custom_metadata_filters()
    test_combined_filters()

    print("\n" + "=" * 80)
    print("DONE - Check the SQL queries above!")
    print("=" * 80)
    print("\nNote: The actual parameters are shown as %s placeholders.")
    print("Django uses parameterized queries for security (prevents SQL injection).")
    print("=" * 80 + "\n")
