import { MigrationOperation } from '../lib/migrationScaffolding'

export const operations = [
    // --------------- table: skald_user ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_user (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            password character varying(128) NOT NULL,
            last_login timestamp with time zone,
            is_superuser boolean NOT NULL,
            first_name character varying(150) NOT NULL,
            last_name character varying(150) NOT NULL,
            is_staff boolean NOT NULL,
            is_active boolean NOT NULL,
            date_joined timestamp with time zone NOT NULL,
            email character varying(254) NOT NULL UNIQUE,
            email_verified boolean NOT NULL,
            name character varying(255) NOT NULL,
            default_organization_id uuid,
            current_project_id uuid
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_user;`,
    }),

    // --------------- table: authtoken_token ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE authtoken_token (
            key character varying(40) NOT NULL PRIMARY KEY,
            created timestamp with time zone NOT NULL,
            user_id bigint NOT NULL UNIQUE,
            CONSTRAINT authtoken_token_user_id_35299eff_fk_skald_user_id
                FOREIGN KEY (user_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS authtoken_token;`,
    }),

    // --------------- table: skald_emailverificationcode ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_emailverificationcode (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            code character varying(6) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            expires_at timestamp with time zone NOT NULL,
            attempts integer NOT NULL,
            user_id bigint NOT NULL UNIQUE,
            CONSTRAINT skald_emailverificationcode_user_id_260f5e14_fk_skald_user_id
                FOREIGN KEY (user_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_emailverificationcode;`,
    }),

    // --------------- table: skald_organization ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_organization (
            uuid uuid NOT NULL PRIMARY KEY,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            name character varying(255) NOT NULL,
            owner_id bigint NOT NULL,
            CONSTRAINT skald_organization_owner_id_c9bf676b_fk_skald_user_id
                FOREIGN KEY (owner_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_organization;`,
    }),

    // --------------- table: skald_organizationmembership ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_organizationmembership (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            access_level integer NOT NULL,
            joined_at timestamp with time zone NOT NULL,
            organization_id uuid NOT NULL,
            user_id bigint NOT NULL,
            CONSTRAINT skald_organizationmember_user_id_organization_id_539edeac_uniq
                UNIQUE (user_id, organization_id),
            CONSTRAINT skald_organizationme_organization_id_21fd5aa7_fk_skald_org
                FOREIGN KEY (organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_organizationmembership_user_id_938634a4_fk_skald_user_id
                FOREIGN KEY (user_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_organizationmembership;`,
    }),

    // --------------- table: skald_organizationmembershipinvite ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_organizationmembershipinvite (
            id uuid NOT NULL PRIMARY KEY,
            email character varying(254) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            accepted_at timestamp with time zone,
            invited_by_id bigint NOT NULL,
            organization_id uuid NOT NULL,
            CONSTRAINT skald_organizationmember_organization_id_email_a6273e0c_uniq
                UNIQUE (organization_id, email),
            CONSTRAINT skald_organizationme_invited_by_id_bb70bb84_fk_skald_use
                FOREIGN KEY (invited_by_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_organizationme_organization_id_f922971e_fk_skald_org
                FOREIGN KEY (organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_organizationmembershipinvite;`,
    }),

    // --------------- table: skald_plan ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_plan (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            slug character varying(50) NOT NULL UNIQUE,
            name character varying(100) NOT NULL,
            stripe_price_id character varying(255) UNIQUE,
            monthly_price numeric(10,2) NOT NULL,
            memo_operations_limit integer,
            chat_queries_limit integer,
            projects_limit integer,
            features jsonb NOT NULL,
            is_active boolean NOT NULL,
            is_default boolean NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_plan;`,
    }),

    // --------------- table: skald_organizationsubscription ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_organizationsubscription (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            stripe_customer_id character varying(255) UNIQUE,
            stripe_subscription_id character varying(255) UNIQUE,
            status character varying(50) NOT NULL,
            current_period_start timestamp with time zone NOT NULL,
            current_period_end timestamp with time zone NOT NULL,
            cancel_at_period_end boolean NOT NULL,
            canceled_at timestamp with time zone,
            trial_start timestamp with time zone,
            trial_end timestamp with time zone,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            organization_id uuid NOT NULL UNIQUE,
            plan_id bigint NOT NULL,
            scheduled_change_date timestamp with time zone,
            scheduled_plan_id bigint,
            stripe_schedule_id character varying(255) UNIQUE,
            CONSTRAINT skald_organizationsu_organization_id_1496289d_fk_skald_org
                FOREIGN KEY (organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_organizationsu_plan_id_f66eaa4c_fk_skald_pla
                FOREIGN KEY (plan_id) REFERENCES skald_plan(id)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_organizationsu_scheduled_plan_id_607e5f4d_fk_skald_pla
                FOREIGN KEY (scheduled_plan_id) REFERENCES skald_plan(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_organizationsubscription;`,
    }),

    // --------------- table: skald_project ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_project (
            uuid uuid NOT NULL PRIMARY KEY,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            name character varying(255) NOT NULL,
            organization_id uuid NOT NULL,
            owner_id bigint NOT NULL,
            CONSTRAINT skald_project_organization_id_826910ec_fk_skald_org
                FOREIGN KEY (organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_project_owner_id_5fc4828a_fk_skald_user_id
                FOREIGN KEY (owner_id) REFERENCES skald_user(id)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_project;`,
    }),

    // --------------- table: skald_projectapikey ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_projectapikey (
            api_key_hash character varying(255) NOT NULL PRIMARY KEY,
            first_12_digits character varying(12) NOT NULL,
            created_at timestamp with time zone NOT NULL,
            project_id uuid NOT NULL,
            CONSTRAINT skald_projectapikey_project_id_398f2e74_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_projectapikey;`,
    }),

    // --------------- table: skald_memo ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_memo (
            uuid uuid NOT NULL PRIMARY KEY,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            title character varying(255) NOT NULL,
            content_length integer NOT NULL,
            metadata jsonb NOT NULL,
            expiration_date timestamp with time zone,
            archived boolean NOT NULL,
            content_hash character varying(255) NOT NULL,
            pending boolean NOT NULL,
            type character varying(255),
            source character varying(255),
            client_reference_id character varying(255),
            project_id uuid NOT NULL,
            CONSTRAINT skald_memo_project_id_b4c56bf7_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_memo;`,
    }),

    // --------------- table: skald_memochunk ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_memochunk (
            uuid uuid NOT NULL PRIMARY KEY,
            chunk_content text NOT NULL,
            chunk_index integer NOT NULL,
            embedding vector(2048) NOT NULL,
            memo_id uuid NOT NULL,
            project_id uuid NOT NULL,
            CONSTRAINT skald_memochunk_memo_id_0faad25b_fk_skald_memo_uuid
                FOREIGN KEY (memo_id) REFERENCES skald_memo(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_memochunk_project_id_6ec66677_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_memochunk;`,
    }),

    // --------------- table: skald_memocontent ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_memocontent (
            uuid uuid NOT NULL PRIMARY KEY,
            content text NOT NULL,
            memo_id uuid NOT NULL,
            project_id uuid NOT NULL,
            CONSTRAINT skald_memocontent_memo_id_f2eae36a_fk_skald_memo_uuid
                FOREIGN KEY (memo_id) REFERENCES skald_memo(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_memocontent_project_id_fa46c46d_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_memocontent;`,
    }),

    // --------------- table: skald_memosummary ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_memosummary (
            uuid uuid NOT NULL PRIMARY KEY,
            summary text NOT NULL,
            embedding vector(2048) NOT NULL,
            memo_id uuid NOT NULL,
            project_id uuid NOT NULL,
            CONSTRAINT skald_memosummary_memo_id_43ac3024_fk_skald_memo_uuid
                FOREIGN KEY (memo_id) REFERENCES skald_memo(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_memosummary_project_id_95cfb327_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_memosummary;`,
    }),

    // --------------- table: skald_memotag ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_memotag (
            uuid uuid NOT NULL PRIMARY KEY,
            tag text NOT NULL,
            memo_id uuid NOT NULL,
            project_id uuid NOT NULL,
            CONSTRAINT skald_memotag_memo_id_a7433d48_fk_skald_memo_uuid
                FOREIGN KEY (memo_id) REFERENCES skald_memo(uuid)
                DEFERRABLE INITIALLY DEFERRED,
            CONSTRAINT skald_memotag_project_id_968368ae_fk_skald_project_uuid
                FOREIGN KEY (project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_memotag;`,
    }),

    // --------------- table: skald_stripeevent ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_stripeevent (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            stripe_event_id character varying(255) NOT NULL UNIQUE,
            event_type character varying(100) NOT NULL,
            payload jsonb NOT NULL,
            processed boolean NOT NULL,
            processing_error text,
            created_at timestamp with time zone NOT NULL,
            processed_at timestamp with time zone
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_stripeevent;`,
    }),

    // --------------- table: skald_usagerecord ---------------
    new MigrationOperation({
        SQL: `
        CREATE TABLE skald_usagerecord (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            billing_period_start date NOT NULL,
            billing_period_end date NOT NULL,
            memo_operations_count integer NOT NULL,
            chat_queries_count integer NOT NULL,
            created_at timestamp with time zone NOT NULL,
            updated_at timestamp with time zone NOT NULL,
            organization_id uuid NOT NULL,
            alerts_sent jsonb NOT NULL,
            CONSTRAINT skald_usagerecord_organization_id_billing__7c9da398_uniq
                UNIQUE (organization_id, billing_period_start),
            CONSTRAINT skald_usagerecord_organization_id_b31763fe_fk_skald_org
                FOREIGN KEY (organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED
        );`,
        rollbackSQL: `DROP TABLE IF EXISTS skald_usagerecord;`,
    }),

    // --------------- Foreign key constraints for skald_user (need to be added after tables exist) ---------------
    new MigrationOperation({
        SQL: `
        ALTER TABLE skald_user
            ADD CONSTRAINT skald_user_current_project_id_ed8d14d2_fk_skald_project_uuid
                FOREIGN KEY (current_project_id) REFERENCES skald_project(uuid)
                DEFERRABLE INITIALLY DEFERRED;`,
        rollbackSQL: `ALTER TABLE skald_user DROP CONSTRAINT IF EXISTS skald_user_current_project_id_ed8d14d2_fk_skald_project_uuid;`,
    }),

    new MigrationOperation({
        SQL: `
        ALTER TABLE skald_user
            ADD CONSTRAINT skald_user_default_organization_0d57be46_fk_skald_org
                FOREIGN KEY (default_organization_id) REFERENCES skald_organization(uuid)
                DEFERRABLE INITIALLY DEFERRED;`,
        rollbackSQL: `ALTER TABLE skald_user DROP CONSTRAINT IF EXISTS skald_user_default_organization_0d57be46_fk_skald_org;`,
    }),

    // --------------- Indexes for authtoken_token ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX authtoken_token_key_10f0b77e_like ON authtoken_token USING btree (key varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS authtoken_token_key_10f0b77e_like;`,
    }),

    // --------------- Indexes for skald_emailverificationcode ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_email_code_27ca5e_idx ON skald_emailverificationcode USING btree (code);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_email_code_27ca5e_idx;`,
    }),

    // --------------- Indexes for skald_memo ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_memo_metadat_9c96be_gin ON skald_memo USING gin (metadata);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memo_metadat_9c96be_gin;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memo_project_8101aa_idx ON skald_memo USING btree (project_id, client_reference_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memo_project_8101aa_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memo_project_88bd2e_idx ON skald_memo USING btree (project_id, source);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memo_project_88bd2e_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memo_project_id_b4c56bf7 ON skald_memo USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memo_project_id_b4c56bf7;`,
    }),

    // --------------- Indexes for skald_memochunk ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_memochunk_memo_id_0faad25b ON skald_memochunk USING btree (memo_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memochunk_memo_id_0faad25b;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memochunk_project_id_6ec66677 ON skald_memochunk USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memochunk_project_id_6ec66677;`,
    }),

    // --------------- Indexes for skald_memocontent ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_memocontent_memo_id_f2eae36a ON skald_memocontent USING btree (memo_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memocontent_memo_id_f2eae36a;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memocontent_project_id_fa46c46d ON skald_memocontent USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memocontent_project_id_fa46c46d;`,
    }),

    // --------------- Indexes for skald_memosummary ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_memosummary_memo_id_43ac3024 ON skald_memosummary USING btree (memo_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memosummary_memo_id_43ac3024;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memosummary_project_id_95cfb327 ON skald_memosummary USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memosummary_project_id_95cfb327;`,
    }),

    // --------------- Indexes for skald_memotag ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_memotag_memo_id_a7433d48 ON skald_memotag USING btree (memo_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memotag_memo_id_a7433d48;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_memotag_project_id_968368ae ON skald_memotag USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_memotag_project_id_968368ae;`,
    }),

    // --------------- Indexes for skald_organization ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_organization_owner_id_c9bf676b ON skald_organization USING btree (owner_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organization_owner_id_c9bf676b;`,
    }),

    // --------------- Indexes for skald_organizationmembership ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationmembership_organization_id_21fd5aa7 ON skald_organizationmembership USING btree (organization_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationmembership_organization_id_21fd5aa7;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationmembership_user_id_938634a4 ON skald_organizationmembership USING btree (user_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationmembership_user_id_938634a4;`,
    }),

    // --------------- Indexes for skald_organizationmembershipinvite ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationmembershipinvite_invited_by_id_bb70bb84 ON skald_organizationmembershipinvite USING btree (invited_by_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationmembershipinvite_invited_by_id_bb70bb84;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationmembershipinvite_organization_id_f922971e ON skald_organizationmembershipinvite USING btree (organization_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationmembershipinvite_organization_id_f922971e;`,
    }),

    // --------------- Indexes for skald_organizationsubscription ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_organ_status_b30bd1_idx ON skald_organizationsubscription USING btree (status);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organ_status_b30bd1_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organ_stripe__4bbed4_idx ON skald_organizationsubscription USING btree (stripe_subscription_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organ_stripe__4bbed4_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organ_stripe__787c7f_idx ON skald_organizationsubscription USING btree (stripe_customer_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organ_stripe__787c7f_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organ_stripe__fb7b46_idx ON skald_organizationsubscription USING btree (stripe_schedule_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organ_stripe__fb7b46_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationsubscr_stripe_subscription_id_e67d0e5c_like ON skald_organizationsubscription USING btree (stripe_subscription_id varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationsubscr_stripe_subscription_id_e67d0e5c_like;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationsubscription_plan_id_f66eaa4c ON skald_organizationsubscription USING btree (plan_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationsubscription_plan_id_f66eaa4c;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationsubscription_scheduled_plan_id_607e5f4d ON skald_organizationsubscription USING btree (scheduled_plan_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationsubscription_scheduled_plan_id_607e5f4d;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationsubscription_stripe_customer_id_aa0de48c_like ON skald_organizationsubscription USING btree (stripe_customer_id varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationsubscription_stripe_customer_id_aa0de48c_like;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_organizationsubscription_stripe_schedule_id_3e51e1c3_like ON skald_organizationsubscription USING btree (stripe_schedule_id varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_organizationsubscription_stripe_schedule_id_3e51e1c3_like;`,
    }),

    // --------------- Indexes for skald_plan ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_plan_slug_0a0cac0f_like ON skald_plan USING btree (slug varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_plan_slug_0a0cac0f_like;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_plan_stripe_price_id_3080b1eb_like ON skald_plan USING btree (stripe_price_id varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_plan_stripe_price_id_3080b1eb_like;`,
    }),

    // --------------- Indexes for skald_project ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_project_organization_id_826910ec ON skald_project USING btree (organization_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_project_organization_id_826910ec;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_project_owner_id_5fc4828a ON skald_project USING btree (owner_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_project_owner_id_5fc4828a;`,
    }),

    // --------------- Indexes for skald_projectapikey ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_projectapikey_api_key_hash_a9fcb967_like ON skald_projectapikey USING btree (api_key_hash varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_projectapikey_api_key_hash_a9fcb967_like;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_projectapikey_project_id_398f2e74 ON skald_projectapikey USING btree (project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_projectapikey_project_id_398f2e74;`,
    }),

    // --------------- Indexes for skald_stripeevent ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_strip_event_t_1ffd58_idx ON skald_stripeevent USING btree (event_type, processed);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_strip_event_t_1ffd58_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_strip_stripe__efbcc3_idx ON skald_stripeevent USING btree (stripe_event_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_strip_stripe__efbcc3_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_stripeevent_stripe_event_id_5dfbba10_like ON skald_stripeevent USING btree (stripe_event_id varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_stripeevent_stripe_event_id_5dfbba10_like;`,
    }),

    // --------------- Indexes for skald_usagerecord ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_usage_billing_07f781_idx ON skald_usagerecord USING btree (billing_period_start);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_usage_billing_07f781_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_usage_organiz_41ff84_idx ON skald_usagerecord USING btree (organization_id, billing_period_start);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_usage_organiz_41ff84_idx;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_usagerecord_organization_id_b31763fe ON skald_usagerecord USING btree (organization_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_usagerecord_organization_id_b31763fe;`,
    }),

    // --------------- Indexes for skald_user ---------------
    new MigrationOperation({
        SQL: `CREATE INDEX skald_user_current_project_id_ed8d14d2 ON skald_user USING btree (current_project_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_user_current_project_id_ed8d14d2;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_user_default_organization_id_0d57be46 ON skald_user USING btree (default_organization_id);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_user_default_organization_id_0d57be46;`,
    }),

    new MigrationOperation({
        SQL: `CREATE INDEX skald_user_email_16347cfd_like ON skald_user USING btree (email varchar_pattern_ops);`,
        rollbackSQL: `DROP INDEX IF EXISTS skald_user_email_16347cfd_like;`,
    }),
]
